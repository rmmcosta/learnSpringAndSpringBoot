- there is pure jpa and spring data jpa
    - we are going to take a look at pure jpa
- JPA vs Hibernate. Java Persistence API (JPA) defines the management of relational 
data in the Java applications. Hibernate is an Object-Relational Mapping (ORM) tool
which is used to save the state of Java object into the database. JPA is the standard, 
hibernate is the implementation.

- we will use h2 database

- orm is just a bridge between the java objects world and 
the relational database tables

- a jpa entity is a pojo
    - can have relationships with other entities
- entity manager
    - objet to persist and retrieve data from the database
- transactions
- we have the traditional relations:
    1 to 1
    1 to many
    many to many
- and we also have embedded 
    - calculated fields (the sum of 2 or more fields for example)
    - in the database they are two different fields
    - but we embedded them to be just one
- data types (java vs sql)
- we can make queries using the criteria api (java based api)
- A common design pattern when using JPA is using DAO (data access objects)
    - this allows us to create an abstraction layer between the java side and the persistence
    side
    - jpa is considered to be leaky because some specifics of the implementation are closely related
    with the data persistance
    - the goal of the dao pattern is to decouple those two sides
        - provides a clean abstraction when dealing with the entity manager and 
        transactions
- spring data jpa uses the repository pattern
    - this pattern is very similar to dao but offers a greater abstraction

- we can go to spring initializr and bring the maven dependencies we may need
that are available there

- defining jpa entities will create automatically the ddl for us
    - ddl is the dafa definition/description language
    - is the commands to create, alter and drop tables
    - this work is done by hibernate

- since the spring boot 1.3 the h2 console is included by default
    - we can use the console to see how things are in the database

- to define a class (pojo) as an entity we need to use annotations
    - @Entity for the class
    - @Id for the int value
    - @GenerateValue(strategy = GenerationType.Auto) also for the id
        - auto for mysql, for h2 works well
        - for oracle we need to use sequence
- h2-console:
    - to access the console we can go to the url and do /h2-console
        - for example localhost:8080/h2-console
    - https://www.baeldung.com/spring-boot-h2-database

- jpa versions and optimistic locking
    - to use the above we must create an attribute called version and use
    the @Version annotation
    - this is considered a best practice when using jpa

- pure jpa dao
    - we need an EntityManagerFactory
        - the factory is thread safe
        - the entity manager is not
    - we need a set method with the annotation @PersistenceUnit
    - this will inject that entity manager factory
    - this makes the dao jpa implementation agnostic
        - we can use hibernate or other thing afterwards
    - we can make the queries by using the create query method
    and the jpql language (java persistence query language)
        - to list we can do entityManager.createQuery("from Product", Product.class).getResultList();
    - to find a specific record we can do:
        entityManager.find(Product.class, id);
    - to insert data we have two options:
        - entityManager.persist(theObject) method (save whatever we give him)
        - entityManager.merge(theObject) method (best suited for create or update)
            - in order for the update to work ok we need to pass the version number
            - we can put it in a hidden input
        - both methods return the created or update object
    - to manage transactions we must use the entityManager.getTransaction():
        - to begin -> entityManager.getTransaction().begin();
        - to commit -> entityManager.getTransaction().commit();
        - we must use this for inserts, updates and deletes
    - to delete a record:
        - entityManager.remove(entityManager.find(Product.class, id));

- bootstrap data
    - we need to develop a class that implements the ApplicationListener<ContextRefreshedEvent>
        - by doing that we will be able to implement logic for the 
        on application event
    - this class needs to be annotated as a spring component

- integration test:
    - first create a configuration class in a package inside test
        @Configuration
        @EnableAutoConfiguration
        - we can just use @SpringBootConfiguration
    @RunWith used in jUnit4 was replaced in jUnit5 by @ExtendWith
    and in fact we can just use @SpringBootTest
    - in our classes we must say which active profile we must consider
        - @ActiveProfiles("something")

- debug spring boot
    - if we --debug as a parameter to the run we will be able to see the logs